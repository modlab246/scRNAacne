library(Seurat)
library(dplyr)
library(cowplot)
library(ggplot2)

#Load data files


#Sample code for Fig. 1a, 1d, 1g
DimPlot(allcelltype, reduction = "umap", group.by = "celltype", label = T, label.size = 3)

#Sample code for Fig. 1b, 1e, 1h
DimPlot(allcelltype, reduction = "umap", group.by = "stim", label = T, label.size = 3)

#Sample code for Fig. 1c, 1f, 1i
cbbPalette <- c("#A21812", "#C11C17", "#C93C38", "#D15C59", "#D97C7A", "#E19C9B", "#B1CFED", "#A2C6EA","#93BDE7","#7EA2C6","#6987A5","#546C84")
Idents(allcelltype) = "seurat_clusters"
# Count number of cells for cluster for each origin
orig = allcelltype$donor
u_orig = sort(unique(orig))
cluster = as.character(Idents(allcelltype))
uct = sort(unique(cluster))
z = matrix(nrow=length(uct), ncol=length(u_orig))
rownames(z) = uct
colnames(z) = u_orig
for (i in 1:nrow(z)){
  for (j in 1:ncol(z)){
    z[i,j] = sum(orig[cluster==uct[i]] == u_orig[j])
  }
}
write.csv(z, "num_cells_each_cluster_by_origin.csv")

# Make a plot about num cells for each cluster by orig
z = read.csv("num_cells_each_cluster_by_origin.csv", row.names=1)
z = t(t(z) / rowSums(t(z)))
z = z / rowSums(z) * 100
z1 = data.frame(ncells=as.vector(z),
                type=rep(as.integer(rownames(z)), ncol(z)),
                orig=rep(colnames(z), each=nrow(z)))
my_color = c("#A21812", "#C11C17", "#C93C38", "#D15C59", "#D97C7A", "#E19C9B", "#B1CFED", "#A2C6EA","#93BDE7","#7EA2C6","#6987A5","#546C84")
ggplot(z1, aes(x=type, y=ncells, fill=orig, group=orig)) +
  geom_bar(stat="identity", width=0.7) +
  scale_fill_manual(values=my_color) +
  theme_classic() +
  labs(x="Cluster", y="% Component of Samples", fill="Sample")+
  scale_x_continuous(breaks=0:max(z1$type))

#Sample code for Fig. 2a-b
VlnPlot(macrophage, features = c("IL1A", "IL1B","TNF","IL6", "IL12B", group.by = "celltype")

#Fig. 2c
exprs <- data.frame(FetchData(object = macrophage, vars = c("IL18","CCL18","MMP7","MMP12"), slot = "data"), macrophage$stim_ct)
p1=ggplot(exprs, aes(macrophage.stim_ct,IL18)) + geom_jitter(size=0.1) +
  theme(text = element_text(size=8),axis.title.x=element_blank(), axis.title.y=element_text(size=8), axis.text.x = element_blank(),axis.text.y = element_text(size=8),
        axis.ticks.x=element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),plot.title = element_text (hjust = 0.5))+ ggtitle ("IL18") + labs(y="Expression Level")
p2=ggplot(exprs, aes(macrophage.stim_ct,CCL18)) + geom_jitter(size=0.1) +
  theme(text = element_text(size=8),axis.title.x=element_blank(), axis.title.y=element_text(size=8), axis.text.x = element_blank(),axis.text.y = element_text(size=8),
        axis.ticks.x=element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),plot.title = element_text (hjust = 0.5))+ ggtitle ("CCL18") + labs(y="Expression Level")
p3=ggplot(exprs, aes(macrophage.stim_ct,MMP7)) + geom_jitter(size=0.1) +
  theme(text = element_text(size=8),axis.title.x=element_blank(), axis.title.y=element_text(size=8), axis.text.x = element_blank(),axis.text.y = element_text(size=8),
        axis.ticks.x=element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),plot.title = element_text (hjust = 0.5))+ ggtitle ("MMP7") + labs(y="Expression Level")
p4=ggplot(exprs, aes(macrophage.stim_ct,MMP12)) + geom_jitter(size=0.1) +
  theme(text = element_text(size=8),axis.title.x=element_blank(), axis.title.y=element_text(size=8), axis.text.x = element_blank(),axis.text.y = element_text(size=8),
        axis.ticks.x=element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),plot.title = element_text (hjust = 0.5))+ ggtitle ("MMP12") + labs(y="Expression Level")
plot_grid(p1,p2,p3,p4)

# Fig. S1b
cts = data.frame(bars=colnames(
), celltypes=allcelltype$celltype, stringsAsFactors=FALSE)
sample = subset(allcelltype, cells=rownames(cts))
sample$subtype = cts$celltypes
DimPlot(sample, group.by="subtype", label=TRUE)
table(sample$donor)

# Count number of cells for celltypes for each origin
orig = sample$donor
u_orig = sort(unique(orig))
celltype = as.character(sample$subtype)
uct = sort(unique(celltype))
z = matrix(nrow=length(uct), ncol=length(u_orig))
rownames(z) = uct
colnames(z) = u_orig
for (i in 1:nrow(z)){
  for (j in 1:ncol(z)){
    z[i,j] = sum(orig[celltype==uct[i]] == u_orig[j])
  }
}
write.csv(z, "num_cells_each_subtype_by_donor.csv")

# Make a plot about num cells for each celltype by orig
z = read.csv("num_cells_each_subtype_by_donor.csv", row.names=1)
z = t(t(z) / rowSums(t(z)))
write.csv(z, "percent_cells_each_subtype_by_donor.csv")
# z = z / rowSums(z) * 100
z[,7:12] = -z[,7:12]
z = z[order(-rowSums(z[,1:6])),]
rownames(z) = gsub("[.]", "-", rownames(z))
z1 = data.frame(ncells=as.vector(z),
                type=rep(rownames(z), ncol(z)),
                orig=rep(colnames(z), each=nrow(z)))
z1$type = factor(z1$type, levels=rownames(z))
z1$orig = gsub("[.]", "-", z1$orig)
colors1 = scales::brewer_pal(palette="Reds")(9)[8:3]
colors2 = scales::brewer_pal(palette="Blues")(9)[3:8]
my_color = c(colors1, colors2)
ggplot(z1, aes(x=type, y=ncells, fill=orig, group=orig)) +
  theme_classic() + geom_bar(stat="identity", width=0.7) +
  scale_fill_manual(values=my_color) +
  labs(x="", y="% Component of Samples", fill=NULL) +
  theme(axis.text.x=element_text(angle=45, hjust=1, vjust=1, size=12))
