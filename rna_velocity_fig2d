{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import anndata\n",
    "import scvelo as scv\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib as plt\n",
    "%load_ext rpy2.ipython"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "sample1 = anndata.read_loom(\"./loom_files/D318.loom\")\n",
    "# Rename the cells in sample1\n",
    "cells = list(sample1.obs.index)\n",
    "for i in range(len(sample1.obs.index)):\n",
    "  cells[i] = \"D318-\" + sample1.obs.index[i].split(\":\")[1][:-1]\n",
    "sample1.obs.index = cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample2 = anndata.read_loom(\"./loom_files/D403.loom\")\n",
    "# Rename the cells in sample2\n",
    "cells = list(sample2.obs.index)\n",
    "for i in range(len(sample2.obs.index)):\n",
    "  cells[i] = \"D403-\" + sample2.obs.index[i].split(\":\")[1][:-1]\n",
    "sample2.obs.index = cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample3 = anndata.read_loom(\"./loom_files/D404.loom\")\n",
    "# Rename the cells in sample3\n",
    "cells = list(sample3.obs.index)\n",
    "for i in range(len(sample3.obs.index)):\n",
    "  cells[i] = \"D404-\" + sample3.obs.index[i].split(\":\")[1][:-1]\n",
    "sample3.obs.index = cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample4 = anndata.read_loom(\"./loom_files/D406_lesional.loom\")\n",
    "# Rename the cells in sample4\n",
    "cells = list(sample4.obs.index)\n",
    "for i in range(len(sample4.obs.index)):\n",
    "  cells[i] = \"D406A-\" + sample4.obs.index[i].split(\":\")[1][:-1]\n",
    "sample4.obs.index = cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample5 = anndata.read_loom(\"./loom_files/D406_nonlesional.loom\")\n",
    "# Rename the cells in sample5\n",
    "cells = list(sample5.obs.index)\n",
    "for i in range(len(sample5.obs.index)):\n",
    "  cells[i] = \"D406H-\" + sample5.obs.index[i].split(\":\")[1][:-1]\n",
    "sample5.obs.index = cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample6 = anndata.read_loom(\"./loom_files/D407_lesional.loom\")\n",
    "# Rename the cells in sample6\n",
    "cells = list(sample6.obs.index)\n",
    "for i in range(len(sample6.obs.index)):\n",
    "  cells[i] = \"D407A-\" + sample6.obs.index[i].split(\":\")[1][:-1]\n",
    "sample6.obs.index = cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample7 = anndata.read_loom(\"./loom_files/D407_nonlesional.loom\")\n",
    "# Rename the cells in sample5\n",
    "cells = list(sample7.obs.index)\n",
    "for i in range(len(sample7.obs.index)):\n",
    "  cells[i] = \"D407H-\" + sample7.obs.index[i].split(\":\")[1][:-1]\n",
    "sample7.obs.index = cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample8 = anndata.read_loom(\"./loom_files/D408_lesional.loom\")\n",
    "# Rename the cells in sample6\n",
    "cells = list(sample8.obs.index)\n",
    "for i in range(len(sample8.obs.index)):\n",
    "  cells[i] = \"D408A-\" + sample8.obs.index[i].split(\":\")[1][:-1]\n",
    "sample8.obs.index = cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample9 = anndata.read_loom(\"./loom_files/D408_nonlesional.loom\")\n",
    "# Rename the cells in sample6\n",
    "cells = list(sample9.obs.index)\n",
    "for i in range(len(sample9.obs.index)):\n",
    "  cells[i] = \"D408H2-\" + sample9.obs.index[i].split(\":\")[1][:-1]\n",
    "sample9.obs.index = cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make the gene names unique\n",
    "sample1.var_names_make_unique()\n",
    "sample2.var_names_make_unique()\n",
    "sample3.var_names_make_unique()\n",
    "sample4.var_names_make_unique()\n",
    "sample5.var_names_make_unique()\n",
    "sample6.var_names_make_unique()\n",
    "sample7.var_names_make_unique()\n",
    "sample8.var_names_make_unique()\n",
    "sample9.var_names_make_unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find the common genes\n",
    "common_vars = pd.unique(sample1.var_names.intersection(sample2.var_names))\n",
    "common_vars = pd.unique(sample3.var_names.intersection(common_vars))\n",
    "common_vars = pd.unique(sample4.var_names.intersection(common_vars))\n",
    "common_vars = pd.unique(sample5.var_names.intersection(common_vars))\n",
    "common_vars = pd.unique(sample6.var_names.intersection(common_vars))\n",
    "common_vars = pd.unique(sample7.var_names.intersection(common_vars))\n",
    "common_vars = pd.unique(sample8.var_names.intersection(common_vars))\n",
    "common_vars = pd.unique(sample9.var_names.intersection(common_vars))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filter the data with common genes\n",
    "scv.pp.filter_genes(sample1, retain_genes=list(common_vars))\n",
    "scv.pp.filter_genes(sample2, retain_genes=list(common_vars))\n",
    "scv.pp.filter_genes(sample3, retain_genes=list(common_vars))\n",
    "scv.pp.filter_genes(sample4, retain_genes=list(common_vars))\n",
    "scv.pp.filter_genes(sample5, retain_genes=list(common_vars))\n",
    "scv.pp.filter_genes(sample6, retain_genes=list(common_vars))\n",
    "scv.pp.filter_genes(sample7, retain_genes=list(common_vars))\n",
    "scv.pp.filter_genes(sample8, retain_genes=list(common_vars))\n",
    "scv.pp.filter_genes(sample9, retain_genes=list(common_vars))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Concatenate the samples\n",
    "samples = sample1.concatenate(sample2, sample3, sample4, sample5, sample6, sample7, sample8, sample9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rename the cells in samples\n",
    "cells = list(samples.obs.index)\n",
    "for i in range(len(samples.obs.index)):\n",
    "    cells[i] = samples.obs.index[i].split(\"-\")[0] + \"-\" + samples.obs.index[i].split(\"-\")[1] \n",
    "samples.obs.index = cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read in metadata\n",
    "meta = pd.read_csv(\"metadata.csv\", index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Filter cells in sample\n",
    "samples = samples[np.isin(samples.obs.index, meta.index)]\n",
    "\n",
    "# Filter cells in metadata\n",
    "meta = meta.loc[samples.obs.index,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add the coordinates to sample\n",
    "coords = meta[[\"UMAP_1\",\"UMAP_2\"]]\n",
    "samples.obsm[\"Coords\"] = coords.values\n",
    "\n",
    "# Add the seurat cluster to sample\n",
    "samples.obs[\"Cluster\"] = [str(x) for x in list(meta[\"seurat_clusters\"])]\n",
    "samples.obs[\"Origin\"] = [str(x) for x in list(meta[\"orig.ident\"])]\n",
    "samples.obs[\"Disease\"] = [str(x) for x in list(meta[\"stim\"])]\n",
    "samples.obs[\"Donor\"] = [str(x) for x in list(meta[\"donor\"])]\n",
    "samples.obs[\"Celltype\"] = [str(x) for x in list(meta[\"celltype\"])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Prepare the plots\n",
    "scv.pp.filter_and_normalize(samples, flavor=\"seurat\")\n",
    "scv.pp.moments(samples, n_pcs=30)\n",
    "scv.tl.velocity(samples, mode=\"stochastic\")\n",
    "scv.tl.velocity_graph(samples)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Show the versions of the depedent packages\n",
    "scv.logging.print_versions()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_colors = {\"TREM2 macrophage\":\"#F8766D\",\"M1-like macrophage\":\"#B79F00\", \"M2-like macrophage\":\"#00BA38\",\n",
    "             \"CD1C DC\":\"#00BFC4\", \"Langerhans\":\"#619CFF\", \"LAMP3 DC\":\"#F564E3\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Plot\n",
    "scv.pl.velocity_embedding(samples, basis='Coords', color=\"Celltype\", dpi=600, palette=my_colors,\n",
    "                          arrow_length=3, colorbar=False, save=\"plot1_celltype.pdf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot\n",
    "scv.pl.velocity_embedding_grid(samples, basis='Coords', color='Celltype', dpi=600, palette=my_colors,\n",
    "                               size=10, arrow_length=3, arrow_size=2, colorbar=False, save=\"plot2_celltype.pdf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot\n",
    "scv.pl.velocity_embedding_stream(samples, basis='Coords', color='Celltype', dpi=600, size=10, palette=my_colors,\n",
    "                                 linewidth=0.5, colorbar=False, save=\"plot3_celltype.pdf\", legend_loc=\"none\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_colors = {\"lesional\":\"#F8766D\", \"nonlesional\":\"#00BFC4\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Plot\n",
    "scv.pl.velocity_embedding(samples, basis='Coords', color=\"Disease\", dpi=600, palette=my_colors,\n",
    "                          arrow_length=3, colorbar=False, save=\"plot1_disease.pdf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot\n",
    "scv.pl.velocity_embedding_grid(samples, basis='Coords', color='Disease', dpi=600, palette=my_colors,\n",
    "                               size=10, arrow_length=3, arrow_size=3, colorbar=False, save=\"plot2_disease.pdf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Plot\n",
    "scv.pl.velocity_embedding_stream(samples, basis='Coords', color='Disease', dpi=600, size=10, palette=my_colors,\n",
    "                                 linewidth=0.5, colorbar=False, save=\"plot3_disease.pdf\", legend_loc=\"none\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
